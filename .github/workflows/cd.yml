name: Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod a+x /usr/local/bin/yq
    
    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        IMAGE_TAG=$(yq e '.services.app.image' docker-compose.yml)
        # Split into base tag and version
        BASE_TAG=$(echo $IMAGE_TAG | cut -d':' -f1)
        VERSION=$(echo $IMAGE_TAG | cut -d':' -f2)
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:${{ steps.get_tag.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    
    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod a+x /usr/local/bin/yq
    
    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        IMAGE_TAG=$(yq e '.services.app.image' docker-compose.yml)
        # Split into base tag and version
        BASE_TAG=$(echo $IMAGE_TAG | cut -d':' -f1)
        VERSION=$(echo $IMAGE_TAG | cut -d':' -f2)
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Pull latest image
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:latest
    
    - name: Stop existing containers
      run: docker compose down
      
    - name: Build and start containers
      env:
        APP_ENV_FILE: /etc/vpn-controls/app.env
        APP_DATA_DIR: /var/lib/vpn-controls
      run: docker compose up -d --no-build
