name: Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install yq
      run: |
        mkdir -p ~/.local/bin
        ARCH=$(uname -m)
        if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64
        else
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        fi
        chmod a+x ~/.local/bin/yq
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        # Extract the image name and tag pattern from docker-compose.yml
        IMAGE_PATTERN=$(yq e '.services.app.image' docker-compose.yml)
        # Remove the ${} syntax and get the default values
        BASE_TAG=$(echo $IMAGE_PATTERN | sed 's/\${IMAGE_NAME:-\([^}]*\)}.*/\1/')
        VERSION=$(echo $IMAGE_PATTERN | sed 's/.*\${IMAGE_TAG:-\([^}]*\)}/\1/')
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: https://index.docker.io/v1/

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:${{ steps.get_tag.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3

    - name: Install yq
      run: |
        mkdir -p ~/.local/bin
        ARCH=$(uname -m)
        if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64
        else
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        fi
        chmod a+x ~/.local/bin/yq
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        # Extract the image name and tag pattern from docker-compose.yml
        IMAGE_PATTERN=$(yq e '.services.app.image' docker-compose.yml)
        # Remove the ${} syntax and get the default values
        BASE_TAG=$(echo $IMAGE_PATTERN | sed 's/\${IMAGE_NAME:-\([^}]*\)}.*/\1/')
        VERSION=$(echo $IMAGE_PATTERN | sed 's/.*\${IMAGE_TAG:-\([^}]*\)}/\1/')
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: https://index.docker.io/v1/

    - name: Setup Podman user namespace
      run: |
        # Create podman config directory if it doesn't exist
        mkdir -p ~/.config/containers
        # Configure podman to use user namespace
        echo -e '[engine]\nuserns = "host"' > ~/.config/containers/containers.conf
        # Ensure podman system is ready
        podman system migrate

    - name: Stop existing containers
      run: sudo docker compose down

    - name: Build and start containers
      env:
        APP_ENV_FILE: /etc/vpn-controls/app.env
        APP_DATA_DIR: /var/lib/vpn-controls
        IMAGE_NAME: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}
        IMAGE_TAG: latest
      run: |
        # Create a temporary env file with our variables
        echo "IMAGE_NAME=${IMAGE_NAME}" > .env
        echo "IMAGE_TAG=${IMAGE_TAG}" >> .env
        echo "APP_ENV_FILE=${APP_ENV_FILE}" >> .env
        echo "APP_DATA_DIR=${APP_DATA_DIR}" >> .env
        sudo docker compose --env-file .env up -d
        # Wait a few seconds to check if container is running
        sleep 5
        if ! sudo docker compose ps | grep -q "Up"; then
          echo "Container failed to start"
          sudo docker compose logs
          exit 1
        fi
