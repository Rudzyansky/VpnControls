name: Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install yq
      run: |
        if [ ! -f ~/.local/bin/yq ]; then
          mkdir -p ~/.local/bin; ARCH=$(uname -m)
          if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then ARCH_NAME='arm64'; else ARCH_NAME='amd64' fi
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$ARCH_NAME
          chmod a+x ~/.local/bin/yq
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        IMAGE_PATTERN=$(yq e '.services.app.image' docker-compose.yml)
        BASE_TAG=$(echo $IMAGE_PATTERN | sed 's/\${IMAGE_TAG:-\([^}]*\)}.*/\1/')
        VERSION=$(echo $IMAGE_PATTERN | sed 's/.*\${IMAGE_VERSION:-\([^}]*\)}/\1/')
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: https://index.docker.io/v1/

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:${{ steps.get_tag.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3

    - name: Install yq
      run: |
        if [ ! -f ~/.local/bin/yq ]; then
          mkdir -p ~/.local/bin; ARCH=$(uname -m)
          if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then ARCH_NAME='arm64'; else ARCH_NAME='amd64' fi
          wget -qO ~/.local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$ARCH_NAME
          chmod a+x ~/.local/bin/yq
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Get image tag from docker-compose.yml
      id: get_tag
      run: |
        IMAGE_PATTERN=$(yq e '.services.app.image' docker-compose.yml)
        BASE_TAG=$(echo $IMAGE_PATTERN | sed 's/\${IMAGE_TAG:-\([^}]*\)}.*/\1/')
        VERSION=$(echo $IMAGE_PATTERN | sed 's/.*\${IMAGE_VERSION:-\([^}]*\)}/\1/')
        echo "base_tag=$BASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        registry: https://index.docker.io/v1/

    - name: Setup Podman user namespace
      run: |
        podman >/dev/null 2>&1; if [ $? -ne 127 ] && [ ! -f ~/.config/containers/containers.conf ]; then
          mkdir -p ~/.config/containers
          echo -e '[engine]\nuserns = "host"' > ~/.config/containers/containers.conf
          podman system migrate
        fi

    - name: Pull latest image
      run: sudo docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}:latest

    - name: Stop existing containers
      run: sudo docker compose down

    - name: Build and start containers
      env:
        APP_ENV_FILE: /etc/vpn-controls/app.env
        APP_DATA_DIR: /var/lib/vpn-controls
        IMAGE_TAG: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.get_tag.outputs.base_tag }}
        IMAGE_VERSION: latest
      run: |
        # Create a temporary env file with our variables
        echo "IMAGE_TAG=${IMAGE_TAG}" > .env
        echo "IMAGE_VERSION=${IMAGE_VERSION}" >> .env
        echo "APP_ENV_FILE=${APP_ENV_FILE}" >> .env
        echo "APP_DATA_DIR=${APP_DATA_DIR}" >> .env
        sudo docker compose --env-file .env up -d
        # Wait a few seconds to check if container is running
        sleep 5
        if ! sudo docker compose ps | grep -q "Up"; then
          echo "Container failed to start"
          sudo docker compose logs
          exit 1
        fi
